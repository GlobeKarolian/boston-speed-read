name: Update Boston News Summaries

on:
  schedule:
    - cron: '0 */2 * * *'  # Run every 2 hours
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'generate_summaries.py'
      - '.github/workflows/**'
      - 'index.html'

permissions:
  contents: write

jobs:
  update-news:
    runs-on: ubuntu-latest
    # Prevent multiple runs at the same time
    concurrency:
      group: news-update
      cancel-in-progress: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests openai feedparser
    
    - name: Generate news summaries
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Starting news generation..."
        python generate_summaries.py
        echo "Generation complete"
      continue-on-error: true
    
    - name: Check if files were created
      run: |
        if [ ! -f news-data.json ]; then
          echo "Error: news-data.json not created"
          echo "Creating fallback file..."
          echo '{"lastUpdated":"'$(date -Iseconds)'","articles":[],"stats":{"error":"Generation failed"}}' > news-data.json
        fi
        echo "news-data.json exists with $(wc -l < news-data.json) lines"
        
        # Check for history file
        if [ -f news-history.json ]; then
          echo "news-history.json exists with $(wc -l < news-history.json) lines"
        else
          echo "No history file yet"
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Pull and merge latest changes
      run: |
        # Fetch latest changes
        git fetch origin main
        
        # Stash local changes
        git stash
        
        # Pull and rebase
        git pull origin main --rebase --strategy-option=ours || true
        
        # Apply stashed changes
        git stash pop || true
    
    - name: Commit and push changes
      run: |
        # Add files
        git add news-data.json
        
        # Add history file if it exists
        if [ -f news-history.json ]; then
          git add news-history.json
        fi
        
        # Check for changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit with timestamp
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          git commit -m "Update news summaries - $TIMESTAMP"
          
          # Push with force-with-lease (safer than force)
          if ! git push origin main; then
            echo "Regular push failed, trying with force-with-lease..."
            git push --force-with-lease origin main
          fi
        fi
